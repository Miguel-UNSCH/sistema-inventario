// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  // local

  // development
  // provider = "sqlite"
  // url      = env("DATABASE_URL")

  // production
  
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

model Cliente {
  id                     String  @id @default(cuid())
  tipoCliente            String  // "PersonaNatural" o "PersonaJuridica"
  
  // Campos para Persona Natural
  firstName              String?
  lastName               String?
  identifier             String? @unique // Campo opcional, 8 dígitos para persona natural
  
  // Campos para Persona Jurídica
  companyName            String?
  ruc                    String? @unique // RUC, 11 dígitos para persona jurídica
  representativeName     String?
  representativePosition String?
  companyType            String?
  
  // Campos comunes
  email                  String
  phone                  String
  address                String?
  
  createdBy              User?   @relation(fields: [createdById], references: [id])
  createdById            String?

  boletas                Boleta[]
  facturas               Factura[]
  salidas                Salida[]
  salidaDetalles         SalidaDetalle[]

  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  @@unique([identifier, ruc]) // Garantiza unicidad en campos clave
}


// Tabla de categorías de productos
model Categoria {
  id          String     @id @default(cuid())
  category    String     @unique
  description String?
  productos   Producto[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de unidades de medida
model UnidadMedida {
  id       String    @id @default(cuid())
  nombre   String    @unique
  simbolo  String // Ej: kg, und, doc, caja, etc.
  entradas Entrada[]
  salidas  Salida[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// tabla de productos

model Producto {
  id          String  @id @default(cuid())
  productName String
  code        String  @unique
  description String?
  stockMinimo Int

  categoryId String
  category   Categoria @relation(fields: [categoryId], references: [id])

  supplierId String?
  supplier   Proveedor? @relation(fields: [supplierId], references: [id])

  createdById String?
  createdBy   User?   @relation(fields: [createdById], references: [id])

  movimientos     MovimientoInventario[]
  detallesBoleta  DetalleBoleta[]
  detallesFactura DetalleFactura[]
  entradas        Entrada[]
  salidas         Salida[]
  stock           Stock[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de proveedores
model Proveedor {
  id           String @id @default(cuid())
  supplierName String @unique
  ruc          String @unique
  email        String
  phone        String
  address      String

  productos Producto[]
  boletas   Boleta[]
  facturas  Factura[]
  entradas  Entrada[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de detalle de boletas
model DetalleBoleta {
  id       String @id @default(cuid())
  boletaId String
  boleta   Boleta @relation(fields: [boletaId], references: [id], onDelete: Cascade)

  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])

  cantidad       Float // Cantidad del producto en la boleta
  precioUnitario Float // Precio unitario del producto
  descuento      Float? // Descuento opcional (en porcentaje o monto)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de detalle de facturas
model DetalleFactura {
  id        String  @id @default(cuid())
  facturaId String
  factura   Factura @relation(fields: [facturaId], references: [id], onDelete: Cascade)

  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])

  cantidad       Float // Cantidad del producto en la factura
  precioUnitario Float // Precio unitario del producto
  descuento      Float? // Descuento opcional (en porcentaje o monto)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de boletas
model Boleta {
  id           String   @id @default(cuid())
  numero       String   @unique
  fechaEmision DateTime @default(now())

  clienteId String?
  cliente   Cliente? @relation(fields: [clienteId], references: [id])

  proveedorId String?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])

  detalles    DetalleBoleta[] // Relación con el detalle de productos
  movimientos MovimientoInventario[]

  total  Float // Total de la boleta
  estado String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de facturas
model Factura {
  id           String   @id @default(cuid())
  numero       String   @unique
  fechaEmision DateTime @default(now())

  clienteId String?
  cliente   Cliente? @relation(fields: [clienteId], references: [id])

  proveedorId String?
  proveedor   Proveedor? @relation(fields: [proveedorId], references: [id])

  detalles    DetalleFactura[] // Relación con el detalle de productos
  movimientos MovimientoInventario[]

  total  Float // Total de la factura
  estado String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// Tabla de movimientos de inventario (entradas/salidas)
model MovimientoInventario {
  id       String @id @default(cuid())
  tipo     String // "entrada" o "salida"
  cantidad Float // Cantidad del movimiento

  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])

  userId String
  user   User   @relation(fields: [userId], references: [id])

  facturaId String?
  factura   Factura? @relation(fields: [facturaId], references: [id])

  boletaId String?
  boleta   Boleta? @relation(fields: [boletaId], references: [id])

  fecha       DateTime @default(now())
  descripcion String? // Ej: Venta realizada o stock agregado
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// Modelo para registrar entradas (compras)
model Entrada {
  id             String     @id @default(cuid())
  productId      String
  producto       Producto   @relation(fields: [productId], references: [id])
  cantidad       Float
  cantidadVendida Float          @default(0)
  enReserva       Float          @default(0)
  precioCompra   Float
  precioVenta    Float
  unidadId       String
  unidad         UnidadMedida @relation(fields: [unidadId], references: [id])

  fechaEntrada   DateTime   @default(now())

  proveedorId    String?
  proveedor      Proveedor? @relation(fields: [proveedorId], references: [id])
  
  salida         Salida[]

  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

// Modelo para registrar salidas (ventas)
model Salida {
  id                  String   @id @default(cuid())
  productId           String
  producto            Producto @relation(fields: [productId], references: [id])
  cantidad            Float
  precioVenta         Float
  descuento           Float? // El descuento puede ser opcional
  tipoDescuento       String? // Nuevo campo para tipo de descuento como String
  precioVentaTotal    Float
  fechaSalida         DateTime @default(now())
  estado              String

  clienteId String?
  cliente   Cliente? @relation(fields: [clienteId], references: [id])

  unidadId       String
  unidad         UnidadMedida @relation(fields: [unidadId], references: [id])

  entradaId           String
  entrada             Entrada  @relation(fields: [entradaId], references: [id])

  salidaDetalleId      String
  salidaDetalle         SalidaDetalle @relation(fields: [salidaDetalleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SalidaDetalle {
  id          String   @id @default(cuid())
  estado      String
  clientId    String
  cliente    Cliente  @relation(fields: [clientId], references: [id])

  salidas     Salida[]
  precioVentaTotal Float

  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


// Tabla de stock actual de productos
model Stock {
  id         String   @id @default(cuid())
  productoId String
  producto   Producto @relation(fields: [productoId], references: [id])

  cantidad  Float // Cantidad actual en stock
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique(productoId) // Garantiza que solo haya un registro por producto
}

// Tablas de usuarios, sesiones, roles y permisos

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  user          String    @unique
  password      String
  accounts      Account[]
  sessions      Session[]
  roleId        String? // Relación con el rol
  role          Role?     @relation(fields: [roleId], references: [id], onDelete: SetNull)

  clientes         Cliente[]
  productos        Producto[]
  movimientos      MovimientoInventario[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  users       User[] // Relación de uno a muchos (Un rol puede estar asociado a muchos usuarios)
  permissions Permission[] // Relación de uno a muchos (Un rol puede tener varios permisos)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id     String @id @default(cuid())
  action String // Puede ser 'create', 'read', 'update', 'delete'
  module String // El módulo al que se aplica el permiso
  roleId String // Relación con la tabla de Roles
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, module, action]) // Este índice asegura combinaciones únicas
}
