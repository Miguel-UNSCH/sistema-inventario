// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {

  // local

  // development
  // provider = "sqlite"
  // url      = env("DATABASE_URL")

  // production
  
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
}

// Tablas de clientes

model PersonaNatural {
  id         Int     @id @default(autoincrement())
  firstName  String
  lastName   String
  identifier String? @unique // Campo opcional, 8 dígitos
  email      String  @unique
  phone      String
  address    String?
  createdBy  User?   @relation(fields: [createdById], references: [id])
  createdById String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([identifier, email]) // Garantiza unicidad en identifier y email
}

model PersonaJuridica {
  id                    Int     @id @default(autoincrement())
  companyName           String
  ruc                   String  @unique // RUC, 11 dígitos
  representativeName    String
  representativePosition String?
  companyEmail          String  @unique
  companyPhone          String
  companyAddress        String?
  companyType           String
  createdBy             User?   @relation(fields: [createdById], references: [id])
  createdById           String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([ruc, companyEmail]) // Garantiza unicidad en RUC y email
}

// Tablas de categorias

model Categoria {
  id          String       @id @default(cuid())
  category    String       @unique
  description String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

// Tablas de productos

model Producto {
    id          String     @id @default(cuid())
    productName String
    code        String  @unique
    description String?
    price       String
    stock       String
    category    String
    supplier    String

    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}


// Tablas de proveedores

model Proveedor {
  id            String       @id @default(cuid())
  supplierName  String       @unique
  ruc           String       @unique
  email         String
  phone         String
  address       String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}


// Tablas de usuarios, sesiones, roles y permisos

model User {
  id            String          @id @default(uuid())
  name          String?
  email         String?         @unique
  emailVerified DateTime?
  image         String?
  user          String          @unique
  password      String
  accounts      Account[]
  sessions      Session[]
  roleId        String?         // Relación con el rol
  role          Role?           @relation(fields: [roleId], references: [id], onDelete: SetNull)

  personaNaturals PersonaNatural[]
  personaJuridicas  PersonaJuridica[]
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
}

model Role {
  id          String       @id @default(cuid())
  name        String       @unique
  description String?
  users       User[]       // Relación de uno a muchos (Un rol puede estar asociado a muchos usuarios)
  permissions Permission[] // Relación de uno a muchos (Un rol puede tener varios permisos)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id        String   @id @default(cuid())
  action    String   // Puede ser 'create', 'read', 'update', 'delete'
  module    String   // El módulo al que se aplica el permiso
  roleId    String   // Relación con la tabla de Roles
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([roleId, module, action])  // Este índice asegura combinaciones únicas
}